#!/bin/bash

set -euo pipefail
clear

# ========================================
# KIỂM TRA HỆ THỐNG
# ========================================

if [ "$(id -u)" -ne 0 ]; then
    echo "ERROR: Script cần chạy với quyền root hoặc sudo!" >&2
    exit 1
fi

if ! command -v dpkg >/dev/null 2>&1; then
    echo "Script này chỉ hỗ trợ hệ thống Debian/Ubuntu!" >&2
    exit 1
fi


# Danh sách các app cần cài
apps=(curl wget git htop unzip nano zip zstd jq sudo python3 net-tools lsof iputils-ping)

# ========================================
# HÀMM HIỂN THỊ THÔNG TIN HỆ THỐNG
# ========================================

show_info() {
    echo
    echo "========================================"
    echo "THÔNG TIN HỆ THỐNG"
    echo "----------------------------------------"
    echo "Hostname            : $(hostname)"
    echo "OS                  : $(lsb_release -ds 2>/dev/null || awk -F= '/^PRETTY_NAME/ {gsub(/"/,"",$2); print $2}' /etc/os-release 2>/dev/null || echo "Unknown")"
    echo "Kernel              : $(uname -r)"
    echo "Arch                : $(uname -m) ($(getconf LONG_BIT)-bit)"
    echo "CPU                 : $(awk -F: '/model name/ {gsub(/^[ \t]+/, "", $2); print $2; exit}' /proc/cpuinfo)"
    echo "CPU Cores           : $(nproc)"
    echo "RAM                 : $(awk '/MemTotal:|MemAvailable:|MemFree:|Buffers:|Cached:/ {if($1=="MemTotal:") total=$2/1024; if($1=="MemAvailable:") avail=$2/1024; if($1=="MemFree:") free=$2/1024; if($1=="Buffers:") buffers=$2/1024; if($1=="Cached:") cached=$2/1024} END {used = total - free - buffers - cached; printf "%s total, %s used, %s available", (total<1000 ? int(total)" MB" : sprintf("%.1f GB",total/1024)), (used<1000 ? int(used)" MB" : sprintf("%.1f GB",used/1024)), (avail<1000 ? int(avail)" MB" : sprintf("%.1f GB",avail/1024))}' /proc/meminfo)"
    echo "Swap                : $(awk '/SwapTotal:|SwapFree:/ {if($1=="SwapTotal:") total=$2/1024; if($1=="SwapFree:") free=$2/1024} END {used = total - free; if(total==0) print "None total, None used, None free"; else printf "%s total, %s used, %s free", (total<1000 ? int(total)" MB" : sprintf("%.1f GB",total/1024)), (used<1000 ? int(used)" MB" : sprintf("%.1f GB",used/1024)), (free<1000 ? int(free)" MB" : sprintf("%.1f GB",free/1024))}' /proc/meminfo)"
    echo "Disk                : $(df -h / | awk 'NR==2 {print $2 " total, " $3 " used, " $4 " free"}')"
    echo "Public IP           : $(curl -s --max-time 3 ifconfig.me 2>/dev/null || echo "Unknown")"
    echo "Private IP          : $(ip -4 addr show | awk '/inet.*brd/ && !/127\.0\.0\.1/ {gsub(/\/.*/, "", $2); print $2; exit}')"
    echo "Main Interface      : $(ip -4 route show default | awk '{print $5; exit}')"
    echo "TCP CC              : $(sysctl -n net.ipv4.tcp_congestion_control 2>/dev/null || echo "Unknown")"
    echo "Virtualization      : $(systemd-detect-virt 2>/dev/null || awk '/hypervisor/ {print "Yes"; exit} END {if(!found) print "None"}' /proc/cpuinfo)"
    echo "Load Average        : $(awk '{print $1", "$2", "$3}' /proc/loadavg)"
    echo "Uptime              : $(awk '{days=int($1/86400); hours=int(($1%86400)/3600); mins=int(($1%3600)/60); if(days>0) printf "%d days, ", days; if(hours>0) printf "%d hours, ", hours; printf "%d minutes", mins}' /proc/uptime)"
    echo "Location            : $(curl -s --max-time 2 ipinfo.io/city 2>/dev/null), $(curl -s --max-time 2 ipinfo.io/country 2>/dev/null)"
    echo "System Time         : $(date +'%d/%m/%Y at %I:%M %p (GMT%:z)')"

    echo
    echo "========================================"
    echo "CẤU HÌNH HỆ THỐNG"
    echo "----------------------------------------"

	echo "[Disable IPv6]"
	grep -v '^\s*#' /etc/sysctl.d/99-disable-ipv6.conf | grep -v '^\s*$'
	echo

	echo "[Memory Config]"
	grep -v '^\s*#' /etc/sysctl.d/99-memory-config.conf | grep -v '^\s*$'
	echo

    # Cấu hình Docker
    DOCKER_VERSION=$(docker --version | cut -d ' ' -f 3 | tr -d ',')
    echo "[Docker $DOCKER_VERSION]"
    if [ -f /etc/docker/daemon.json ]; then
        sed -E '/^\s*\/\//d; /^\s*\/\*/,/\*\//d; /^\s*$/d' /etc/docker/daemon.json | python3 -c "import json,sys;d=json.load(sys.stdin);[print(f'{k}.{k2}={v2}') if type(v)==dict else print(f'{k}={v if type(v)!=list else \",\".join(v)}') for k,v in d.items() for k2,v2 in (v.items() if type(v)==dict else [('',v)])]"
    else
        echo "Chưa có cấu hình daemon.json"
    fi

    # DNS
    echo
    echo "[DNS]"
    grep '^nameserver' /etc/resolv.conf || echo "Không có cấu hình nameserver"

    # Chrony
    if command -v chronyc >/dev/null 2>&1; then
        echo
        echo "[Chrony]"
        status=$(chronyc tracking | awk -F': ' '/Leap status/ {print $2}')
        jitter_seconds=$(chronyc tracking | awk -F': ' '/Root dispersion/ {print $2}' | xargs)
        jitter_ms=$(awk -v val="$jitter_seconds" 'BEGIN {printf "%.2f", val * 1000}')
        
        echo "Chrony trạng thái : $status"
        [[ -n "$jitter_ms" ]] && echo "Sai số đồng bộ    : ±${jitter_ms} ms"
    else
        echo
        echo "[Chrony]"
        echo "Chrony chưa được cài đặt"
    fi

    # Phần mềm đã cài đặt
    echo
    echo "[Phần mềm đã cài đặt]"
    readarray -t installed_apps < <(for app in "${apps[@]}"; do 
        command -v "$app" >/dev/null 2>&1 && echo "$app"
    done)
    echo "${installed_apps[@]}"
    echo
}

# Kiểm tra tham số --info
if [[ "${1:-}" == "--info" ]]; then
    show_info
    exit 0
fi


# ========================================
# CẤU HÌNH CƠ BẢN HỆ THỐNG
# ========================================
hostname=$(hostname)
localhost_ip="127.0.0.1"
hosts_file="/etc/hosts"
if grep -q "$hostname" "$hosts_file"; then
    echo "Hostname $hostname đã có trong $hosts_file."
else
    echo "Thêm hostname $hostname vào $hosts_file."
    echo "$localhost_ip $hostname" | tee -a "$hosts_file" > /dev/null
    echo "Đã thêm $hostname vào $hosts_file."
fi

# Cấu hình DNS Server (khóa cứng resolv.conf để tránh bị sửa lại)
systemctl disable --now systemd-resolved 2>/dev/null || true
if lsattr /etc/resolv.conf 2>/dev/null | grep -q '\-i\-'; then
    chattr -i /etc/resolv.conf
    echo "Đã mở khóa /etc/resolv.conf"
fi
rm -f /etc/resolv.conf
echo -e "nameserver 8.8.8.8\nnameserver 1.1.1.1" > /etc/resolv.conf
chattr +i /etc/resolv.conf

# ========================================
# CẬP NHẬT HỆ ĐIỀU HÀNH
# ========================================

# Chỉ cập nhật OS Ubuntu
apt-get update -y

mapfile -t upgradable_packages < <(apt list --upgradable 2>/dev/null | tail -n +2)
declare -a packages_to_upgrade=()

for pkg_info in "${upgradable_packages[@]}"; do
    pkg=$(echo "$pkg_info" | cut -d/ -f1)
    repo=$(echo "$pkg_info" | cut -d/ -f2 | awk '{print $1}' | cut -d- -f1)
    
    if [[ "$repo" =~ ^(ubuntu|updates|security|backports)$ ]]; then
        packages_to_upgrade+=("$pkg")
    fi
done

if [ ${#packages_to_upgrade[@]} -gt 0 ]; then
    apt-get install --no-install-recommends --only-upgrade -y "${packages_to_upgrade[@]}"
fi

echo "Hoàn tất quá trình cập nhật hệ điều hành!"

# Cài đặt các app thiết yếu hay dùng
sudo apt install -y "${apps[@]}"

# ========================================
# Cài đặt ứng dụng hay dùng, tắt 1 số thứ không dùng
# ========================================

cat <<EOF | sudo tee /etc/sysctl.d/99-disable-ipv6.conf
# Disable IPv6
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOF
sudo sysctl -p /etc/sysctl.d/99-disable-ipv6.conf


# Cài đặt múi giờ Việt Nam
timedatectl set-timezone Asia/Ho_Chi_Minh

# Cài đặt Chrony, đồng bộ thời gian
apt-get install -y chrony
systemctl start chrony
systemctl enable chrony

# ========================================
# Tạo swapfile
# ========================================
RAM_GB=$(awk '/MemTotal/ {printf "%.0f", $2/1024/1024}' /proc/meminfo)
SWAP_SIZE=$([ $RAM_GB -le 2 ] && echo "2G" || echo "4G")

echo "RAM: ${RAM_GB}GB - Creating ${SWAP_SIZE} swapfile"

# Remove old swap
sudo swapoff /swapfile 2>/dev/null
sudo rm -f /swapfile
sudo sed -i '/\/swapfile/d' /etc/fstab

# Create new swap
sudo fallocate -l $SWAP_SIZE /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab

sudo sh -c 'echo "vm.swappiness = 10" > /etc/sysctl.d/99-memory-config.conf'
sudo sysctl -p /etc/sysctl.d/99-memory-config.conf

# ========================================
# Tăng Thời Gian Kết Nối SSH
# ========================================
# Thay thế nếu đã có, thêm mới nếu chưa có
if grep -q "^ClientAliveInterval" /etc/ssh/sshd_config; then
    sudo sed -i 's/^ClientAliveInterval.*/ClientAliveInterval 7200/' /etc/ssh/sshd_config
    echo "Đã cập nhật ClientAliveInterval 7200"
else
    echo "ClientAliveInterval 7200" | sudo tee -a /etc/ssh/sshd_config
    echo "Đã thêm ClientAliveInterval 7200"
fi

# Restart SSH service
sudo systemctl restart sshd
echo
# ========================================
# CÀI ĐẶT VÀ TỐI ƯU DOCKER
# ========================================

# Cài đặt Docker
if ! command -v docker &>/dev/null; then
    curl -fsSL https://get.docker.com | sh
    usermod -aG docker $(whoami)
    systemctl start docker
    systemctl enable docker
else
    echo "Docker đã được cài đặt. Bỏ qua phần cài đặt."
fi

# Tối ưu hóa hiệu suất Docker
mkdir -p /etc/docker
cat <<EOF > /etc/docker/daemon.json
{
  "storage-driver": "overlay2",
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "10m",
    "max-file": "3"
  },
  "max-concurrent-downloads": 10,
  "max-concurrent-uploads": 10,
  "dns": ["8.8.8.8", "1.1.1.1"],
  "userland-proxy": false
}
EOF
systemctl restart docker

# ========================================
# HIỂN THỊ THÔNG TIN HOÀN TẤT
# ========================================

show_info

echo
echo "######################################################"
echo "# KHUYẾN NGHỊ: KHỞI ĐỘNG LẠI HỆ THỐNG"
echo "# Để áp dụng tất cả thay đổi, vui lòng chạy lệnh:"
echo "#"
echo "#         reboot now"
echo "#"
echo "######################################################"
echo
